import numpy as np
from numpy.testing import assert_array_equal
from oblique_forests.tree import DecisionTreeClassifier

X_small = np.array(
    [
        [
            0,
            0,
            4,
            0,
            0,
            0,
            1,
            -14,
            0,
            -4,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            5,
            3,
            0,
            -4,
            0,
            0,
            1,
            -5,
            0.2,
            0,
            4,
            1,
        ],
        [
            -1,
            -1,
            0,
            0,
            -4.5,
            0,
            0,
            2.1,
            1,
            0,
            0,
            -4.5,
            0,
            1,
        ],
        [
            -1,
            -1,
            0,
            -1.2,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0,
            0,
            1,
        ],
        [
            -1,
            -1,
            0,
            0,
            0,
            0,
            0,
            3,
            0,
            0,
            0,
            0,
            0,
            1,
        ],
        [
            -1,
            -2,
            0,
            4,
            -3,
            10,
            4,
            0,
            -3.2,
            0,
            4,
            3,
            -4,
            1,
        ],
        [
            2.11,
            0,
            -6,
            -0.5,
            0,
            11,
            0,
            0,
            -3.2,
            6,
            0.5,
            0,
            -3,
            1,
        ],
        [
            2.11,
            0,
            -6,
            -0.5,
            0,
            11,
            0,
            0,
            -3.2,
            6,
            0,
            0,
            -2,
            1,
        ],
        [
            2.11,
            8,
            -6,
            -0.5,
            0,
            11,
            0,
            0,
            -3.2,
            6,
            0,
            0,
            -2,
            1,
        ],
        [
            2.11,
            8,
            -6,
            -0.5,
            0,
            11,
            0,
            0,
            -3.2,
            6,
            0.5,
            0,
            -1,
            0,
        ],
        [
            2,
            8,
            5,
            1,
            0.5,
            -4,
            10,
            0,
            1,
            -5,
            3,
            0,
            2,
            0,
        ],
        [
            2,
            0,
            1,
            1,
            1,
            -1,
            1,
            0,
            0,
            -2,
            3,
            0,
            1,
            0,
        ],
        [
            2,
            0,
            1,
            2,
            3,
            -1,
            10,
            2,
            0,
            -1,
            1,
            2,
            2,
            0,
        ],
        [
            1,
            1,
            0,
            2,
            2,
            -1,
            1,
            2,
            0,
            -5,
            1,
            2,
            3,
            0,
        ],
        [
            3,
            1,
            0,
            3,
            0,
            -4,
            10,
            0,
            1,
            -5,
            3,
            0,
            3,
            1,
        ],
        [
            2.11,
            8,
            -6,
            -0.5,
            0,
            1,
            0,
            0,
            -3.2,
            6,
            0.5,
            0,
            -3,
            1,
        ],
        [
            2.11,
            8,
            -6,
            -0.5,
            0,
            1,
            0,
            0,
            -3.2,
            6,
            1.5,
            1,
            -1,
            -1,
        ],
        [
            2.11,
            8,
            -6,
            -0.5,
            0,
            10,
            0,
            0,
            -3.2,
            6,
            0.5,
            0,
            -1,
            -1,
        ],
        [
            2,
            0,
            5,
            1,
            0.5,
            -2,
            10,
            0,
            1,
            -5,
            3,
            1,
            0,
            -1,
        ],
        [
            2,
            0,
            1,
            1,
            1,
            -2,
            1,
            0,
            0,
            -2,
            0,
            0,
            0,
            1,
        ],
        [
            2,
            1,
            1,
            1,
            2,
            -1,
            10,
            2,
            0,
            -1,
            0,
            2,
            1,
            1,
        ],
        [
            1,
            1,
            0,
            0,
            1,
            -3,
            1,
            2,
            0,
            -5,
            1,
            2,
            1,
            1,
        ],
        [
            3,
            1,
            0,
            1,
            0,
            -4,
            1,
            0,
            1,
            -2,
            0,
            0,
            1,
            0,
        ],
    ]
)

y_small = [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]

# toy sample
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
y = [-1, -1, -1, 1, 1, 1]
T = [[-1, -1], [2, 2], [3, 2]]
true_result = [-1, 1, 1]


def test_classification_toy():
    # Check classification on a toy dataset.
    # This test fails for random_state=0 and random_state=1234
    clf = DecisionTreeClassifier(random_state=1)
    clf.fit(X, y)
    assert_array_equal(clf.predict(T), true_result)


def test_tree():
    clf = DecisionTreeClassifier()

    # clf.fit(X, y)

#test_tree()
test_classification_toy()
